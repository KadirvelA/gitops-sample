name: Dev Environment Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy with Security Scanning
    steps:
      # Checkout code
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      # 1. Intentional Secret Exposure (for GitLeaks to catch)
      - name: Intentional Secret Exposure
        run: |
          echo "apiKey=12345-secret-hardcoded-key" >> .env
          echo "password=hardcoded-password" >> .env

      # 2. Dependency Scanning with OWASP Dependency-Check (using outdated dependencies)
      - name: Dependency Scan with OWASP Dependency-Check
        run: |
          # Create a sample package.json with outdated dependencies for Node.js
          echo '{
            "name": "vulnerable-project",
            "version": "1.0.0",
            "dependencies": {
              "lodash": "4.17.10"  
            }
          }' > package.json

          # Create the output directory
          mkdir -p $(pwd)/dependency-check-report
          
           # Run dependency-check
          docker run --rm \
            -v "$(pwd):/src" \
            owasp/dependency-check \
            --project "Vulnerable Project" \
            --scan /src \
            --format "ALL" \
            --out /src/dependency-check-report

      # 3. Vulnerability Scan with Trivy (for a known vulnerable image)
      - name: Container Image Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "nginx:1.16"  # Intentionally vulnerable version of nginx
          format: "table"
          ignore-unfixed: false

      # (Optional) Upload Dependency Report as Artifact
      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-report

      # Build and Deploy Job (Will be skipped if pipeline fails due to scans)
      - name: Build and Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          api_location: ""
          output_location: "."

      # Create Pull Request to QA
      - name: Create Pull Request to QA
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Merge dev into qa"
          title: "Pull Request: Merge dev into qa"
          body: "This PR merges the changes from dev into qa."
          base: qa
          head: dev
          branch: dev-to-qa-automated-pr
